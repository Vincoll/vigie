package process

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/influxdata/influxdb/client/v2"
	"github.com/sirupsen/logrus"

	"github.com/vincoll/vigie/pkg/teststruct"
	"github.com/vincoll/vigie/pkg/tsdb"
	"github.com/vincoll/vigie/pkg/utils"
)

// updateParentTestStruct permet de rafraichir l'état de Structures (TestSuites,TC)
// Ce changement d'état est du à un changement d'état d'une TStep
func updateParentTestStruct(TSuite *teststruct.TestSuite, TCase *teststruct.TestCase) {

	// UpdateStatus TC
	statusTC := TCase.UpdateStatus()
	// UpdateStatus TestSuites
	if statusTC == false {
		// TC ResultStatus is False then
		// TestSuite is set to false immediately
		TSuite.SetStatus(teststruct.Failure)
	} else {
		// This precise TestCase is OK,
		// But we need to check the others TCs in this TestSuites
		// to check if at least one of the TCs remains KO
		TSuite.UpdateStatus()
	}

}

func insertTaskToDB(task *teststruct.Task) {

	start := time.Now()

	task.RLockAll()

	// Push the Step Results to InfluxDB
	utils.Log.WithFields(logrus.Fields{
		"package":   "process",
		"testcase":  task.TestCase.Name,
		"teststep":  task.TestStep.Name,
		"testsuite": task.TestSuite.Name,
	}).Debug("Push task result into DB")

	// Create a Time series data aka points for InfluxDB
	// TAGS are used to identify a task in the DB for later queries
	taskTags := map[string]string{
		"testsuite": task.TestSuite.Name,
		"testcase":  task.TestCase.Name,
		"teststep":  task.TestStep.Name,
	}

	// FIELDS are the points value generated by the probe
	// For each task 3 fields will be write (ResultStatus, ResponseTime, Returned probe result)
	taskFields := make(map[string]interface{}, 3)

	// ResultStatus Teststep(string detail)
	taskFields["status"] = task.TestStep.Status
	// ResponseTime (If relevant: float64 second based)
	taskFields["responsetime"] = task.TestStep.ResponseTimeInflux()
	// Returned probe result (string: raw json result)
	taskFields["msg"] = msgtojson(task.TestStep.VigieResults)
	// Returned probe result (string: raw json result)
	if task.TestStep.Status == teststruct.AssertFailure {
		taskFields["assert"] = "Complete Assert Messages"
	} else {
		taskFields["assert"] = ""
	}

	// POINT
	taskNP, errnp := client.NewPoint("vigie_teststep", taskTags, taskFields, task.TestStep.LastAttempt)
	if errnp != nil {
		utils.Log.WithFields(logrus.Fields{
			"teststep":  task.TestSuite.Name,
			"testcase":  task.TestCase.Name,
			"testsuite": task.TestStep.Name,
			"package":   "process",
		}).Errorf("Cannot generate Influx point: %s", errnp)
	}

	// Write to InfluxDB
	errwdb := tsdb.InfluxInst.WritePoint(taskNP, "")
	if errwdb != nil {

		utils.Log.WithFields(logrus.Fields{
			"teststep":  task.TestSuite.Name,
			"testcase":  task.TestCase.Name,
			"testsuite": task.TestStep.Name,
			"package":   "process",
		}).Error("Cannot write Influx point into DB: ", errwdb)
	}

	// Push the Step Results to InfluxDB
	utils.Log.WithFields(logrus.Fields{
		"package":   "process",
		"testcase":  task.TestCase.Name,
		"teststep":  task.TestStep.Name,
		"testsuite": task.TestSuite.Name,
	}).Tracef("Time to complete insertIntoDB: %s", time.Since(start))

	task.RUnlockAll()

}

// updateTestStateToDB updateParentTestStruct only testcase and testsuite status
func updateTestStateToDB(task *teststruct.Task) {

	start := time.Now()

	task.RLockAll()

	// Create a Time series data aka points for InfluxDB
	// TAGS are used to identify a task in the DB for later Queries
	taskTags := map[string]string{
		"testsuite": task.TestSuite.Name,
		"testcase":  task.TestCase.Name,
	}

	// FIELDS are the points value generated by the Probe
	testCaseField := map[string]interface{}{
		"status": task.TestCase.Status,
	}

	// FIELDS are the points value generated by the Probe
	testSuiteField := map[string]interface{}{
		"status": task.TestSuite.Status,
	}

	// POINT TestCase
	taskTC, err := client.NewPoint("vigie_testcase", taskTags, testCaseField, task.TestStep.LastAttempt)
	if err != nil {
		println("shit")
	}

	// Write TestCase to InfluxDB
	_ = tsdb.InfluxInst.WritePoint(taskTC, "")

	// POINT TestSuite
	taskTS, err := client.NewPoint("vigie_testsuite", taskTags, testSuiteField, task.TestStep.LastAttempt)
	if err != nil {
		println("shit")
	}

	// Write to InfluxDB TestSuite
	_ = tsdb.InfluxInst.WritePoint(taskTS, "")

	utils.Log.WithFields(logrus.Fields{
		"package":   "process",
		"testcase":  task.TestCase.Name,
		"teststep":  task.TestStep.Name,
		"testsuite": task.TestSuite.Name,
	}).Tracef("Time to complete insertIntoDB: %s", time.Since(start))

	task.RUnlockAll()
}

func msgtojson(vrs []teststruct.VigieResult) string {

	/*
		prCopy := map[string]interface{}{}
		utils.DeepCopyJSON(vrs, prCopy)

		delete(prCopy, "responsetime")
	*/
	data, err := json.Marshal(vrs)
	if err != nil {
		fmt.Printf("marshal failed: %s", err)
	}

	return string(data)
}
